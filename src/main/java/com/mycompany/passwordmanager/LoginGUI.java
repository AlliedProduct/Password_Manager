/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.passwordmanager;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import javax.swing.JOptionPane;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Domantas & Nojus & 
 */
public class LoginGUI extends javax.swing.JFrame {

    private HashMap<String, String> userDatabase = new HashMap<>(); // To store usernames and passwords

    /**
     * Creates new form LoginGUI
     */
    public LoginGUI() {
        initComponents();
        setLocationRelativeTo(null);
        loadUserData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void loadUserData() {
    userDatabase = new HashMap<>();
    try (BufferedReader reader = new BufferedReader(new FileReader("user_data.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(":");
            if (parts.length == 3) { // Username, Salt, and Hashed Password
                String username = parts[0];
                String salt = parts[1];
                String hashedPassword = parts[2];
                userDatabase.put(username, salt + ":" + hashedPassword);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    private void saveUserData() {
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("user_data.txt"))) {
        for (Map.Entry<String, String> entry : userDatabase.entrySet()) {
            String username = entry.getKey();
            String[] parts = entry.getValue().split(":");
            if (parts.length == 2) {
                String salt = parts[0];
                String hashedPassword = parts[1];
                writer.write(username + ":" + salt + ":" + hashedPassword);
                writer.newLine();
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    private String hashPassword(String password, byte[] salt) {
    try {
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(salt);
        byte[] hashedPassword = md.digest(password.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : hashedPassword) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
    return null;
}
    private byte[] generateSalt() {
    byte[] salt = new byte[16];
    new SecureRandom().nextBytes(salt);
    return salt;
}

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createAccountLbl = new javax.swing.JLabel();
        createAccountUsername = new javax.swing.JTextField();
        createAccountPassword = new javax.swing.JPasswordField();
        usernameLbl1 = new javax.swing.JLabel();
        passwordLbl1 = new javax.swing.JLabel();
        createAccountBtn = new javax.swing.JButton();
        signInLbl = new javax.swing.JLabel();
        usernameLbl2 = new javax.swing.JLabel();
        signInUsername = new javax.swing.JTextField();
        passwordLbl2 = new javax.swing.JLabel();
        signInPassword = new javax.swing.JPasswordField();
        signInBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        createAccountLbl.setText("Create an Account");

        createAccountUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountUsernameActionPerformed(evt);
            }
        });

        createAccountPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountPasswordActionPerformed(evt);
            }
        });

        usernameLbl1.setText("Username:");

        passwordLbl1.setText("Password:");

        createAccountBtn.setText("Create Account");
        createAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountBtnActionPerformed(evt);
            }
        });

        signInLbl.setText("Sign in");

        usernameLbl2.setText("Username:");

        signInUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInUsernameActionPerformed(evt);
            }
        });

        passwordLbl2.setText("Password:");

        signInPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInPasswordActionPerformed(evt);
            }
        });

        signInBtn.setText("Sign in");
        signInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usernameLbl2)
                                .addGap(27, 27, 27))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLbl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(signInUsername)
                                .addComponent(signInPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                            .addComponent(createAccountLbl)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(signInBtn))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(usernameLbl1)
                                .addGap(25, 25, 25)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(createAccountUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createAccountPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createAccountBtn))))
                .addContainerGap(204, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(signInLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(signInLbl)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLbl2)
                    .addComponent(signInUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(passwordLbl2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(21, 21, 21))
                    .addComponent(signInPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(signInBtn)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createAccountBtn)
                        .addGap(72, 72, 72))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(createAccountLbl)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createAccountUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createAccountPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordLbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(115, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createAccountUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createAccountUsernameActionPerformed

    private void createAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountBtnActionPerformed
        // TODO add your handling code here:
        String username = createAccountUsername.getText();
    String password = new String(createAccountPassword.getPassword());

    if (userDatabase.containsKey(username)) {
        JOptionPane.showMessageDialog(this, "Username already exists.");
    } else {
        byte[] salt = generateSalt();
        String saltBase64 = Base64.getEncoder().encodeToString(salt);
        String hashedPassword = hashPassword(password, salt);
        userDatabase.put(username, saltBase64 + ":" + hashedPassword);
        saveUserData();
        JOptionPane.showMessageDialog(this, "Account created successfully!");
    }
    }//GEN-LAST:event_createAccountBtnActionPerformed

    private void signInUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_signInUsernameActionPerformed

    private void signInPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_signInPasswordActionPerformed

    private void signInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInBtnActionPerformed
        // TODO add your handling code here:
    String username = signInUsername.getText();
    String password = new String(signInPassword.getPassword());

    if (userDatabase.containsKey(username)) {
        String[] parts = userDatabase.get(username).split(":");
        if (parts.length == 2) {
            byte[] storedSalt = Base64.getDecoder().decode(parts[0]);
            String storedHash = parts[1];
            String inputHash = hashPassword(password, storedSalt);

            if (storedHash.equals(inputHash)) {
                JOptionPane.showMessageDialog(this, "Login successful!");

                try {
                    // Initialize PasswordManager with a master password
                    PasswordManager passwordManager = new PasswordManager(password); 
                    new MainGUI(passwordManager).setVisible(true); 
                    this.dispose(); 
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error initializing password manager: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                return;
            }
        }
    }
    JOptionPane.showMessageDialog(this, "Invalid username or password.");

    }//GEN-LAST:event_signInBtnActionPerformed

    private void createAccountPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_createAccountPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createAccountBtn;
    private javax.swing.JLabel createAccountLbl;
    private javax.swing.JPasswordField createAccountPassword;
    private javax.swing.JTextField createAccountUsername;
    private javax.swing.JLabel passwordLbl1;
    private javax.swing.JLabel passwordLbl2;
    private javax.swing.JButton signInBtn;
    private javax.swing.JLabel signInLbl;
    private javax.swing.JPasswordField signInPassword;
    private javax.swing.JTextField signInUsername;
    private javax.swing.JLabel usernameLbl1;
    private javax.swing.JLabel usernameLbl2;
    // End of variables declaration//GEN-END:variables
}
